#!/usr/bin/env python3
"""
LanAim POS System v2.4 - Phase 3 Setup
Database initialization and sample data for Phase 3

This script sets up the Phase 3 database with enhanced analytics models
and creates comprehensive sample data for testing.
"""

import os
import sys
from datetime import datetime, timedelta, time
from decimal import Decimal
import random

# Add the project root to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app
from models import (
    db, User, DeliveryZone, Menu, MenuOptionGroup, MenuOptionItem,
    Order, OrderItem, OrderItemOption, Feedback, Ingredient, RecipeBOM,
    StockAdjustment, Promotion, DailyReport, HourlyStats, MenuPopularity,
    CustomerSession, get_thai_now, update_daily_report, update_hourly_stats,
    update_menu_popularity
)

def create_sample_data():
    """Create comprehensive sample data for Phase 3 testing"""
    
    print("üöÄ Creating Phase 3 sample data...")
    
    # Create admin user if not exists
    admin_user = User.query.filter_by(username='admin').first()
    if not admin_user:
        admin_user = User(username='admin', role='admin')
        admin_user.set_password('admin123')
        db.session.add(admin_user)
        print("‚úÖ Created admin user")
    
    # Create staff users
    kitchen_staff = User.query.filter_by(username='kitchen').first()
    if not kitchen_staff:
        kitchen_staff = User(username='kitchen', role='kitchen_staff')
        kitchen_staff.set_password('kitchen123')
        db.session.add(kitchen_staff)
        print("‚úÖ Created kitchen staff user")
    
    delivery_staff = User.query.filter_by(username='delivery').first()
    if not delivery_staff:
        delivery_staff = User(username='delivery', role='delivery_staff')
        delivery_staff.set_password('delivery123')
        db.session.add(delivery_staff)
        print("‚úÖ Created delivery staff user")
    
    # Create delivery zones
    zones_data = [
        {'name': '‡πÇ‡∏ã‡∏ô A - ‡∏ä‡∏±‡πâ‡∏ô 1', 'description': '‡πÇ‡∏ï‡πä‡∏∞ A1-A10'},
        {'name': '‡πÇ‡∏ã‡∏ô B - ‡∏ä‡∏±‡πâ‡∏ô 1', 'description': '‡πÇ‡∏ï‡πä‡∏∞ B1-B10'},
        {'name': '‡πÇ‡∏ã‡∏ô C - ‡∏ä‡∏±‡πâ‡∏ô 2', 'description': '‡πÇ‡∏ï‡πä‡∏∞ C1-C8'},
        {'name': '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ô‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô', 'description': '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏Å‡∏°.'}
    ]
    
    for zone_data in zones_data:
        zone = DeliveryZone.query.filter_by(name=zone_data['name']).first()
        if not zone:
            zone = DeliveryZone(**zone_data)
            db.session.add(zone)
    
    db.session.commit()
    print("‚úÖ Created delivery zones")
    
    # Create ingredients
    ingredients_data = [
        {'name': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢', 'unit': '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', 'stock_quantity': 50, 'low_stock_threshold': 10, 'cost_per_unit': 25},
        {'name': '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏°‡∏π', 'unit': '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', 'stock_quantity': 20, 'low_stock_threshold': 5, 'cost_per_unit': 180},
        {'name': '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏Å‡πà', 'unit': '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', 'stock_quantity': 15, 'low_stock_threshold': 3, 'cost_per_unit': 120},
        {'name': '‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà', 'unit': '‡∏ü‡∏≠‡∏á', 'stock_quantity': 200, 'low_stock_threshold': 30, 'cost_per_unit': 4},
        {'name': '‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á‡∏à‡∏µ‡∏ô', 'unit': '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', 'stock_quantity': 8, 'low_stock_threshold': 2, 'cost_per_unit': 40},
        {'name': '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏û‡∏∑‡∏ä', 'unit': '‡∏•‡∏¥‡∏ï‡∏£', 'stock_quantity': 10, 'low_stock_threshold': 2, 'cost_per_unit': 45},
        {'name': '‡∏ã‡∏≠‡∏™‡∏´‡∏≠‡∏¢‡∏ô‡∏≤‡∏á‡∏£‡∏°', 'unit': '‡∏Ç‡∏ß‡∏î', 'stock_quantity': 5, 'low_stock_threshold': 1, 'cost_per_unit': 35},
        {'name': '‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î', 'unit': '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', 'stock_quantity': 3, 'low_stock_threshold': 1, 'cost_per_unit': 250},
        {'name': '‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®', 'unit': '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', 'stock_quantity': 5, 'low_stock_threshold': 1, 'cost_per_unit': 30},
        {'name': '‡∏´‡∏≠‡∏°‡πÉ‡∏´‡∏ç‡πà', 'unit': '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', 'stock_quantity': 3, 'low_stock_threshold': 1, 'cost_per_unit': 25}
    ]
    
    for ing_data in ingredients_data:
        ingredient = Ingredient.query.filter_by(name=ing_data['name']).first()
        if not ingredient:
            ingredient = Ingredient(**ing_data)
            db.session.add(ingredient)
    
    db.session.commit()
    print("‚úÖ Created ingredients")
    
    # Create menu items with enhanced variety
    menu_items = [
        # Rice dishes
        {'name': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π', 'price': 45, 'category': '‡∏Ç‡πâ‡∏≤‡∏ß', 'description': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°'},
        {'name': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÑ‡∏Å‡πà', 'price': 40, 'category': '‡∏Ç‡πâ‡∏≤‡∏ß', 'description': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÑ‡∏Å‡πà‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÑ‡∏ó‡∏¢'},
        {'name': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á', 'price': 60, 'category': '‡∏Ç‡πâ‡∏≤‡∏ß', 'description': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î ‡∏´‡∏≠‡∏°‡∏Å‡∏£‡∏∏‡πà‡∏ô'},
        {'name': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà', 'price': 35, 'category': '‡∏Ç‡πâ‡∏≤‡∏ß', 'description': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà‡πÄ‡∏à'},
        {'name': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥', 'price': 50, 'category': '‡∏Ç‡πâ‡∏≤‡∏ß', 'description': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á'},
        
        # Stir-fried dishes
        {'name': '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î', 'price': 65, 'category': '‡∏ú‡∏±‡∏î', 'description': '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡πÉ‡∏™‡πà‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà'},
        {'name': '‡∏ú‡∏±‡∏î‡∏ã‡∏µ‡∏≠‡∏¥‡πä‡∏ß‡∏´‡∏°‡∏π', 'price': 45, 'category': '‡∏ú‡∏±‡∏î', 'description': '‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏ú‡∏±‡∏î‡∏ã‡∏µ‡∏≠‡∏¥‡πä‡∏ß‡∏î‡∏≥‡πÉ‡∏™‡πà‡∏´‡∏°‡∏π'},
        {'name': '‡∏ú‡∏±‡∏î‡∏ö‡∏∏‡πâ‡∏á‡πÑ‡∏ü‡πÅ‡∏î‡∏á', 'price': 40, 'category': '‡∏ú‡∏±‡∏î', 'description': '‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á‡∏à‡∏µ‡∏ô‡∏ú‡∏±‡∏î‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏´‡∏≠‡∏¢'},
        {'name': '‡∏£‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏°‡∏π', 'price': 50, 'category': '‡∏ú‡∏±‡∏î', 'description': '‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏£‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏π'},
        
        # Soups
        {'name': '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', 'price': 70, 'category': '‡πÅ‡∏Å‡∏á/‡∏ï‡πâ‡∏°', 'description': '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡πÉ‡∏™‡∏£‡∏™‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô'},
        {'name': '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà', 'price': 55, 'category': '‡πÅ‡∏Å‡∏á/‡∏ï‡πâ‡∏°', 'description': '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ô‡∏∏‡πà‡∏°'},
        {'name': '‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà', 'price': 50, 'category': '‡πÅ‡∏Å‡∏á/‡∏ï‡πâ‡∏°', 'description': '‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà‡∏Å‡∏∞‡∏ó‡∏¥‡∏™‡∏î'},
        
        # Salads
        {'name': '‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢', 'price': 35, 'category': '‡∏¢‡∏≥/‡∏™‡∏•‡∏±‡∏î', 'description': '‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÉ‡∏™‡πà‡∏ñ‡∏±‡πà‡∏ß‡∏ù‡∏±‡∏Å‡∏¢‡∏≤‡∏ß ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®'},
        {'name': '‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π', 'price': 45, 'category': '‡∏¢‡∏≥/‡∏™‡∏•‡∏±‡∏î', 'description': '‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö‡πÉ‡∏™‡πà‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢'},
        {'name': '‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', 'price': 40, 'category': '‡∏¢‡∏≥/‡∏™‡∏•‡∏±‡∏î', 'description': '‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏±‡∏ö'},
        
        # Beverages
        {'name': '‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤', 'price': 10, 'category': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', 'description': '‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°‡∏Ç‡∏ß‡∏î'},
        {'name': '‡πÇ‡∏Ñ‡πâ‡∏Å', 'price': 15, 'category': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', 'description': '‡πÇ‡∏Ñ‡∏Ñ‡∏≤‡πÇ‡∏Ñ‡∏•‡πà‡∏≤'},
        {'name': '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢', 'price': 25, 'category': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', 'description': '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏¢‡πá‡∏ô‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏±‡∏ô'},
        {'name': '‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏¢‡πá‡∏ô', 'price': 30, 'category': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', 'description': '‡∏Å‡∏≤‡πÅ‡∏ü‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡πÄ‡∏¢‡πá‡∏ô'},
        {'name': '‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡∏Ñ‡∏±‡πâ‡∏ô', 'price': 35, 'category': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', 'description': '‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡∏™‡∏î‡∏Ñ‡∏±‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà'}
    ]
    
    for menu_data in menu_items:
        menu = Menu.query.filter_by(name=menu_data['name']).first()
        if not menu:
            menu = Menu(**menu_data)
            db.session.add(menu)
    
    db.session.commit()
    print("‚úÖ Created menu items")
    
    # Create option groups for some menu items
    rice_menu = Menu.query.filter_by(name='‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π').first()
    if rice_menu:
        # Spice level option
        spice_group = MenuOptionGroup.query.filter_by(menu_id=rice_menu.id, name='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î').first()
        if not spice_group:
            spice_group = MenuOptionGroup(
                menu_id=rice_menu.id,
                name='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î',
                is_required=False,
                max_selections=1
            )
            db.session.add(spice_group)
            db.session.flush()
            
            spice_options = [
                {'name': '‡πÑ‡∏°‡πà‡πÄ‡∏ú‡πá‡∏î', 'additional_price': 0},
                {'name': '‡πÄ‡∏ú‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢', 'additional_price': 0},
                {'name': '‡πÄ‡∏ú‡πá‡∏î‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', 'additional_price': 0},
                {'name': '‡πÄ‡∏ú‡πá‡∏î‡∏°‡∏≤‡∏Å', 'additional_price': 0}
            ]
            
            for opt_data in spice_options:
                option = MenuOptionItem(
                    group_id=spice_group.id,
                    **opt_data
                )
                db.session.add(option)
        
        # Extra items option
        extra_group = MenuOptionGroup.query.filter_by(menu_id=rice_menu.id, name='‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°').first()
        if not extra_group:
            extra_group = MenuOptionGroup(
                menu_id=rice_menu.id,
                name='‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
                is_required=False,
                max_selections=3
            )
            db.session.add(extra_group)
            db.session.flush()
            
            extra_options = [
                {'name': '‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß', 'additional_price': 10},
                {'name': '‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß', 'additional_price': 15},
                {'name': '‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö', 'additional_price': 20},
                {'name': '‡∏ú‡∏±‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°', 'additional_price': 5}
            ]
            
            for opt_data in extra_options:
                option = MenuOptionItem(
                    group_id=extra_group.id,
                    **opt_data
                )
                db.session.add(option)
    
    db.session.commit()
    print("‚úÖ Created menu options")
    
    # Create historical orders (last 30 days) for analytics
    create_historical_orders()
    
    print("‚úÖ Phase 3 sample data created successfully!")

def create_historical_orders():
    """Create historical orders for the last 30 days for analytics testing"""
    
    print("üìä Creating historical orders for analytics...")
    
    zones = DeliveryZone.query.all()
    menus = Menu.query.all()
    
    if not zones or not menus:
        print("‚ùå No zones or menus found. Skipping historical orders.")
        return
    
    # Create orders for the last 30 days
    now = get_thai_now()
    start_date = now - timedelta(days=30)
    
    customer_names = [
        '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', '‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏£‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏ô‡∏¥‡∏£‡∏±‡∏ô‡∏î‡∏£‡πå ‡∏™‡∏∏‡∏Ç‡πÉ‡∏à', '‡∏ß‡∏¥‡πÑ‡∏• ‡πÅ‡∏™‡∏á‡∏î‡∏µ',
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏ê ‡∏Å‡∏¥‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç', '‡∏™‡∏∏‡∏°‡∏≤‡∏•‡∏µ ‡∏õ‡∏£‡∏≤‡∏ì‡∏µ', '‡∏ß‡∏µ‡∏£‡∏∞ ‡πÄ‡∏Å‡πà‡∏á‡πÄ‡∏Å‡πâ‡∏≤', '‡∏õ‡∏¥‡∏¢‡∏∞ ‡∏£‡∏±‡∏Å‡∏©‡πå‡πÉ‡∏à',
        '‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå ‡πÄ‡∏û‡∏ä‡∏£‡∏î‡∏µ', '‡∏™‡∏∏‡∏Å‡∏±‡∏ç‡∏ç‡∏≤ ‡πÉ‡∏à‡∏á‡∏≤‡∏°', '‡∏ò‡∏ô‡∏†‡∏±‡∏ó‡∏£ ‡∏≠‡∏¢‡∏π‡πà‡∏î‡∏µ', '‡∏£‡∏±‡∏ä‡∏î‡∏≤ ‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á',
        '‡∏à‡∏¥‡∏£‡∏≤‡∏¢‡∏∏ ‡∏õ‡∏±‡∏ç‡∏ç‡∏≤', '‡∏ô‡∏±‡∏ô‡∏ó‡∏ô‡∏≤ ‡∏™‡∏á‡∏ö‡πÉ‡∏à', '‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à ‡∏®‡∏¥‡∏•‡∏õ‡πå', '‡∏Å‡∏ô‡∏Å‡∏ß‡∏£‡∏£‡∏ì ‡∏£‡∏±‡∏Å‡∏î‡∏µ'
    ]
    
    phone_numbers = [
        '081-234-5678', '082-345-6789', '083-456-7890', '084-567-8901',
        '085-678-9012', '086-789-0123', '087-890-1234', '088-901-2345'
    ]
    
    # Define realistic order patterns by hour
    hourly_weights = {
        6: 1, 7: 2, 8: 3, 9: 2, 10: 1,  # Morning
        11: 8, 12: 10, 13: 8, 14: 3,    # Lunch peak
        15: 1, 16: 2, 17: 4, 18: 9,     # Afternoon/Early dinner
        19: 10, 20: 8, 21: 5, 22: 2,    # Dinner peak
        23: 1, 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0  # Night/Early morning
    }
    
    total_orders = 0
    
    for day_offset in range(30):
        current_date = start_date + timedelta(days=day_offset)
        
        # Weekend effect (more orders on weekends)
        weekend_multiplier = 1.5 if current_date.weekday() >= 5 else 1.0
        
        # Daily base orders (15-25 per day)
        daily_base_orders = random.randint(15, 25)
        daily_orders = int(daily_base_orders * weekend_multiplier)
        
        for _ in range(daily_orders):
            # Select hour based on realistic patterns
            hour = random.choices(
                list(hourly_weights.keys()),
                weights=list(hourly_weights.values())
            )[0]
            
            # Create realistic timestamp
            order_time = current_date.replace(
                hour=hour,
                minute=random.randint(0, 59),
                second=random.randint(0, 59)
            )
            
            # Create order
            order = Order(
                customer_name=random.choice(customer_names),
                customer_phone=random.choice(phone_numbers),
                delivery_address_details=f'‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà {random.randint(1, 100)} ‡∏ã‡∏≠‡∏¢ {random.randint(1, 20)}',
                delivery_zone_id=random.choice(zones).id,
                total_price=0,  # Will be calculated
                payment_method='COD',  # Add required field
                created_at=order_time
            )
            
            # Generate order number
            order.generate_order_number()
            
            # Set random status based on time
            age_hours = (now - order_time).total_seconds() / 3600
            if age_hours > 2:
                # Old orders should be completed
                status_choices = ['delivered', 'completed', 'cancelled']
                weights = [70, 25, 5]  # 70% delivered, 25% completed, 5% cancelled
                order.status = random.choices(status_choices, weights=weights)[0]
                
                if order.status in ['delivered', 'completed']:
                    order.accepted_at = order_time + timedelta(minutes=random.randint(2, 8))
                    order.completed_at = order.accepted_at + timedelta(minutes=random.randint(15, 30))
                    order.payment_status = 'paid'
            elif age_hours > 0.5:
                # Recent orders might be in progress
                order.status = random.choice(['accepted', 'preparing', 'ready'])
                order.accepted_at = order_time + timedelta(minutes=random.randint(2, 8))
            # else: keep as 'pending'
            
            db.session.add(order)
            db.session.flush()
            
            # Add order items (1-4 items per order)
            num_items = random.randint(1, 4)
            selected_menus = random.sample(menus, min(num_items, len(menus)))
            
            total_price = 0
            
            for menu in selected_menus:
                quantity = random.randint(1, 2)
                item_price = float(menu.price) * quantity
                
                order_item = OrderItem(
                    order_id=order.id,
                    menu_id=menu.id,
                    menu_name=menu.name,
                    quantity=quantity,
                    price_per_item=menu.price
                )
                db.session.add(order_item)
                total_price += item_price
            
            order.total_price = total_price
            
            # Add feedback for completed orders (60% chance)
            if order.status in ['delivered', 'completed'] and random.random() < 0.6:
                # More recent orders get better ratings
                if age_hours < 24:
                    rating_weights = [5, 15, 20, 30, 30]  # 1-5 stars, skewed positive for recent
                else:
                    rating_weights = [10, 10, 20, 30, 30]  # More balanced for older
                
                rating = random.choices([1, 2, 3, 4, 5], weights=rating_weights)[0]
                
                comments = {
                    5: ['‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å!', '‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°', '‡∏à‡∏∞‡∏°‡∏≤‡∏≠‡∏µ‡∏Å'],
                    4: ['‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏î‡∏µ', '‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å', '‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö', '‡πÇ‡∏≠‡πÄ‡∏Ñ'],
                    3: ['‡∏õ‡∏Å‡∏ï‡∏¥', '‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤', '‡∏û‡∏≠‡πÉ‡∏ä‡πâ', '‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏Ñ‡∏£‡∏±‡∏ö'],
                    2: ['‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏î‡∏µ', '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÑ‡∏î‡πâ', '‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤', '‡∏ä‡πâ‡∏≤‡πÑ‡∏õ'],
                    1: ['‡πÑ‡∏°‡πà‡∏≠‡∏£‡πà‡∏≠‡∏¢', '‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á', '‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à', '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏î‡πà‡∏ß‡∏ô']
                }
                
                comment = random.choice(comments.get(rating, ['']))
                
                feedback = Feedback(
                    order_id=order.id,
                    rating=rating,
                    comment=comment,
                    created_at=order.completed_at + timedelta(minutes=random.randint(5, 120))
                )
                db.session.add(feedback)
            
            total_orders += 1
    
    db.session.commit()
    print(f"‚úÖ Created {total_orders} historical orders")
    
    # Update analytics reports
    print("üìà Updating analytics reports...")
    for day_offset in range(30):
        target_date = (start_date + timedelta(days=day_offset)).date()
        update_daily_report(target_date)
        
        # Update hourly stats for each hour that had orders
        for hour in range(24):
            update_hourly_stats(target_date, hour)
        
        # Update menu popularity
        update_menu_popularity(target_date)
    
    print("‚úÖ Analytics reports updated")

def main():
    """Main setup function"""
    
    print("üè™ LanAim POS System v2.4 - Phase 3 Setup")
    print("=" * 50)
    
    # Create Flask app
    app = create_app()
    
    with app.app_context():
        try:
            # Drop and recreate all tables
            print("üóëÔ∏è  Dropping existing tables...")
            db.drop_all()
            
            print("üèóÔ∏è  Creating new tables...")
            db.create_all()
            
            # Create sample data
            create_sample_data()
            
            print("\n" + "=" * 50)
            print("‚úÖ Phase 3 setup completed successfully!")
            print("\nDefault Login Credentials:")
            print("üë§ Admin: username=admin, password=admin123")
            print("üë®‚Äçüç≥ Kitchen: username=kitchen, password=kitchen123")
            print("üö¥ Delivery: username=delivery, password=delivery123")
            print("\nüöÄ You can now start the application with: python app.py")
            
        except Exception as e:
            print(f"‚ùå Setup failed: {str(e)}")
            return False
    
    return True

if __name__ == '__main__':
    main()
